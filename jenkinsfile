#!/usr/bin/env groovy

@Library('shared-library')_


pipeline {
     agent any 
     
     options {
        skipDefaultCheckout(true)
        // reducebuilds
        timestamps()

        // Keep the 10 most recent builds
          buildDiscarder(logRotator(numToKeepStr: '4'))
     
    }
    
      environment{
        JENKINS_PUSH_BRANCH = 'ngnix_yaml'

    }
   
    
    
   
    //  Settign up  to ensure the process does not hang up after 
    stages{
            stage("Checkout Code") {
            steps {
            script {
                git branch: "main",
                    url: 'https://github.com/Joetib/webapp.git'
            }
        }
    }
  
        stage("Login to AWS ECR") {
            steps {
                script{ 
                   LoginToAwsEcr(credentialsId:"1281b2be-69e3-4045-895c-361a31581f57", awsRegion:"us-east-1", awsAccountId:"001526952227")
                    
                }
                
            }
        }

     stage('Build Docker Image') {
            steps {
                script{ 
                    sh 'docker login'
                    sh 'docker build -t test/shared_library .'
                
                    
                }
                
            }

     }
 

    

        stage("Push Docker image to AWS ECR") {
            steps {
                sh'echo tagging the built image to be pushed to the new repo on aws '
                sh 'docker tag test/shared_library:latest 001526952227.dkr.ecr.us-east-1.amazonaws.com/test/shared_library:${BUILD_ID}'
                
                
                sh 'echo pushng new image to the ECR repo on aws'
                sh 'docker push 001526952227.dkr.ecr.us-east-1.amazonaws.com/test/shared_library:${BUILD_ID}'
                
            }
        }   



 stage("checkout Manifest deploymentfile"){
            steps{
                script{
                    sh 'mkdir -p Manifest'
                    dir("Manifest"){
                        git branch : "jenkins_pipeline",
                        credentialsId: "github",
                        url: "https://github.com/terateck/manifests.git"
                    }
                }
            }
        }

        stage("Image Tag Update")  {
            steps{
                script{
                    dir("Manifest"){
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE'){
                        withCredentials([usernamePassword(credentialsId: 'github', passwordVariable:'GIT_PASSWORD',usernameVariable:'GIT_USERNAME')]){
                            sh '''
                            git config user.email markowusuayim@gmail.com
                            git config user.name markowusu
                            '''
                            sh 'cat nginx/nginx_deployment.yaml'

                            sh "sed -i '' 's+001526952227.dkr.ecr.us-east-1.amazonaws.com/test/shared_library.*+001526952227.dkr.ecr.us-east-1.amazonaws.com/test/shared_library:${BUILD_ID}+g' nginx/nginx_deployment.yaml"

                            sh 'cat nginx/nginx_deployment.yaml'
                            sh 'git checkout -b jenkins_pipeline_${BUILD_ID}'
                            sh 'git add .'

                            sh "git commit -am 'feat: updated the image path of the ngnix deployment file'"
        // https://github.com/terateck/manifests.git
                            sh 'git push https://github.com/terateck/manifests.git jenkins_pipeline_${BUILD_ID}'
                            
                        }
                    }
                    }
                }
            }
        }


}


post{
        always {
            echo 'Terateck CD in progresss'
        }
        success {
            echo 'CD build is successful'
            mail to: 'markowusuayim@gmail.com',
                 subject: 'CD build is Successful',
                 body: "The image has built succesfuly"
        }
        
        failure {
            echo 'Build failed; Perform a regression test'
        }
        unstable {
            echo 'Build marked as UNSTABLE'
        }
        changed {
            echo 'state of the Pipeline has changed'
            // echo 'For example, if the Pipeline was previously failing but is now successful'
        }
        
    }
    
    }











